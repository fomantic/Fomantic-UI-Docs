---
layout      : 'default'
css         : 'state'
standalone  : true

element     : 'State'
elementType : 'behavior'

title       : 'State'
description : 'State is a simple state machine for controlling the look and feel of an element based on what state it occupies'
type        : 'UI Behavior'
---


<%- @partial('header',  { tabs: { overview: 'Overview', usage: 'Usage',  behaviors: 'Behaviors',  settings: 'Settings' } }) %>

<div class="main ui container">
  <div class="ui active intro tab" data-tab="overview">

    <div class="no example">
      <h2 class="ui dividing header">Description</h2>
      <p>State allows you to do things like
        <ul class="ui large list">
            <li>Tie loading state to AJAX requests</li>
            <li>Tie text to different states, so for example having a button go from `Follow to Followed to Unfollow`` on hover depending on its current state</li>
            <li>Tie multiple elements state to each other, for example, automatically having all `follow` buttons activate on a page after a successfully activating one button.</li>
            <li>Give activate/deactivate test functions which give criteria to allow or reject an item 'activating'</li>
            <li>Handle correctly removing/adding class names signifying states without having to have garbled `addClass` `removeClass` sprinkled over your site</li>
        </ul>
      </p>
    </div>

    <div class="test example">
      <h4 class="ui header">Activate Elements Programmatically</h4>
      <p>State is designed to make the process of integrating data sources to UI components seamless, <a href="#state-state-management">tying State request state</a> to UI states automatically.</p>
      <p>For example adding an State behavior to an <a href="/elements/input.html"><code>input</code></a> will occur <code>oninput</code>, while a <a href="/elements/button.html"><code>button</code></a>, will query the server <code>onclick</code>.</p>
      <div class="ui icon input">
        <i class="search icon"></i>
        <input type="text" placeholder="Type here...">
      </div>
      <div class="ui hidden divider"></div>
      <div class="ui primary button">Click Me</div>
      <div class="ui disabled button">Disabled</div>
    </div>


  </div>

  <div class="ui intro tab" data-tab="usage">

  </div>

  <div class="ui tab" data-tab="behaviors">

    <h2 class="ui dividing header">Behavior</h2>

    <p>All the following behaviors can be called using the syntax:</p>
    <div class="code" data-type="javascript">
    $('.your.element')
      .state('behavior name', argumentOne, argumentTwo)
    ;
    </div>

    <table class="ui definition celled sortable table segment">
      <thead>
        <th>Behavior</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>is active</td>
          <td>Returns whether element state is active</td>
        </tr>
        <tr>
          <td>is inactive</td>
          <td>Returns whether element state is inactive</td>
        </tr>
        <tr>
          <td>is state(type)</td>
          <td>Checks the element for specific state, given by a string name</td>
        </tr>
        <tr>
          <td>is enabled</td>
          <td>Returns whether element is enabled</td>
        </tr>
        <tr>
          <td>is disabled</td>
          <td>Returns whether element is disabled</td>
        </tr>
        <tr>
          <td>is loading</td>
          <td>Returns whether element is loading</td>
        </tr>
        <tr>
          <td>is textEnabled</td>
          <td>Returns whether element is capable to show text which could be changed by stages</td>
        </tr>
        <tr>
          <td>is button</td>
          <td>Returns whether element is a <a href="/elements/button.html">progress</a></td>
        </tr>
        <tr>
          <td>is input</td>
          <td>Returns whether element is a n<a href="/elements/input.html">progress</a></td>
        </tr>
        <tr>
          <td>is progress</td>
          <td>Returns whether element is a <a href="/modules/progress.html">progress</a></td>
        </tr>
        <tr>
          <td>allows(state)</td>
          <td>Checks is a specific state, given by a string name, is currently allowed to be changed</td>
        </tr>
        <tr>
          <td>allow(state)</td>
          <td>Allow change of element state, given by a string name</td>
        </tr>
        <tr>
          <td>disallow(state)</td>
          <td>Disallow change of element state, given by a string name</td>
        </tr>
        <tr>
          <td>enable</td>
          <td>Set element as enabled</td>
        </tr>
        <tr>
          <td>disable</td>
          <td>Set element as disabled</td>
        </tr>
        <tr>
          <td>set state(state)</td>
          <td>Sets a specific state, given by a string name</td>
        </tr>
        <tr>
          <td>remove state(state)</td>
          <td>Removes a specific state, given by a string name</td>
        </tr>
        <tr>
          <td>change state</td>
          <td>Toggles between active/inactive state immediatly without any checks</td>
        </tr>
        <tr>
          <td>toggle state</td>
          <td>Toggles between active/inactive state but checks if element is active and uses a possible attached <a href="/behaviors/api.html">api</a></td>
        </tr>
        <tr>
          <td>flash text(text, duration, callback)</td>
          <td>Changes the elements text for a optional given amount of time. After that, reverts the text to the previous value and optionally calls a given callback function</td>
        </tr>
        <tr>
          <td>refresh</td>
          <td>Refreshes cached selectors</td>
        </tr>
        <tr>
          <td>destroy</td>
          <td>Removes State settings from the element and all events</td>
        </tr>
      </tbody>
    </table>


  </div>


  <div class="ui tab" data-tab="settings">

    <h2 class="ui header">
      Behavior
    </h2>
    <table class="ui sortable celled definition table">
      <thead>
        <th class="three wide">Setting</th>
        <th class="three wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>automatic</td>
          <td>true</td>
          <td>Whether possible states should be determined automatically based on type of UI</td>
        </tr>
        <tr>
          <td>sync</td>
          <td>false</td>
          <td>When set to <code>true</code> and state is used on multiple elements, state will be synced across all bound elements.</td>
        </tr>
        <tr>
          <td>flashDuration</td>
          <td>1000</td>
          <td>Default duration to show text when using <code>flash text</code>.</td>
        </tr>
        <tr>
          <td>filter</td>
          <td>
          <div class="code" data-type="javascript">
            filter: {
                text: '.loading, .disabled',
                active: '.disabled',
            }
          </div>
          </td>
          <td>Selector filter to recognize element states which cannot be changed</code></td>
        </tr>
        <tr>
          <td>context</td>
          <td>false</td>
          <td>When set to a selector, will use a delegated pattern to bind events from this element.</td>
        </tr>
      </tbody>
    </table>

    <h2 class="ui header">
      Callbacks
    </h2>

    <table class="ui sortable celled definition table">
      <thead>
        <th class="three wide">Setting</th>
        <th class="three wide">Context</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>activateTest</td>
          <td>initialized element</td>
          <td>Called before a state is activated. Return false to cancel state activation</td>
        </tr>
        <tr>
          <td>deactivateTest</td>
          <td>initialized element</td>
          <td>Called before a state is deactivated. Return false to cancel state deactivation</td>
        </tr>
        <tr>
          <td>onActivate</td>
          <td>initialized element</td>
          <td>Call when state was activated</td>
        </tr>
        <tr>
          <td>onDeactivate</td>
          <td>initialized element</td>
          <td>Call when state was deactivated</td>
        </tr>
        <tr>
          <td>onChange</td>
          <td>initialized element</td>
          <td>Called after a state has changed</td>
        </tr>
      </tbody>
    </table>

    <h2 class="ui dividing header">
      Module
    </h2>

    <p>These settings are native to all modules, and define how the component ties content to DOM attributes, and debugging settings for the module.</p>

    <table class="ui sortable celled definition table">
      <thead>
        <th>Setting</th>
        <th class="six wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>name</td>
          <td>State</td>
          <td>Name used in log statements</td>
        </tr>
        <tr>
          <td>namespace</td>
          <td>state</td>
          <td>Event namespace. Makes sure module teardown does not effect other events attached to an element.</td>
        </tr>
        <tr>
          <td>regExp</td>
          <td>
            <div class="code" data-type="javascript">
            regExp  : {
              required: /\{\$*[A-z0-9]+\}/g,
              optional: /\{\/\$*[A-z0-9]+\}/g,
            }
            </div>
          </td>
          <td>Regular expressions used for template matching</td>
        </tr>
        <tr>
          <td>selector</td>
          <td>
            <div class="code" data-type="javascript">
            selector: {
              text : false
            }
            </div>
          </td>
          <td>Selectors used to find parts of a module</td>
        </tr>
        <tr>
          <td>className</td>
          <td>
            <div class="code" data-type="javascript">
            className: {
              active   : 'active',
              disabled : 'disabled',
              error    : 'error',
              loading  : 'loading',
              success  : 'success',
              warning  : 'warning'
            }
            </div>
          </td>
          <td>Class names used to determine element state</td>
        </tr>
        <tr>
          <td>states</td>
          <td>
            <div class="code" data-type="javascript">
            states: {
                active: true,
                disabled: true,
                error: true,
                loading: true,
                success: true,
                warning: true
            }
            </div>
          </td>
          <td>Default states. When set to <code>false</code> those are disallowed for a change.</td>
        </tr>
        <tr>
          <td>text</td>
          <td>
            <div class="code" data-type="javascript">
            text: {
                disabled: false,
                flash: false,
                hover: false,
                active: false,
                inactive: false,
                activate: false,
                deactivate: false
            }
            </div>
          </td>
          <td>State texts for relevant elements like <a href="/elements/button.html">button</a>. Provide strings here when needed.</td>
        </tr>
        <tr>
          <td>metadata</td>
          <td>
            <div class="code" data-type="javascript">
            metadata: {
              promise    : 'promise',
              storedText : 'stored-text'
            }
            </div>
          </td>
          <td>Metadata used to store xhr and response promise</td>
        </tr>
        <tr>
          <td>silent</td>
          <td>false</td>
          <td>Silences all console output including error messages, regardless of other debug settings.</td>
        </tr>
        <tr>
          <td>debug</td>
          <td>false</td>
          <td>Debug output to console</td>
        </tr>
        <tr>
          <td>performance</td>
          <td>true</td>
          <td>Show <code>console.table</code> output with performance metrics</td>
        </tr>
        <tr>
          <td>verbose</td>
          <td>false</td>
          <td>Debug output includes all internal behaviors</td>
        </tr>
        <tr>
          <td>errors</td>
          <td colspan="2">
            <div class="code" data-type="javascript">
            // errors
            error : {
              method     : 'The method you called is not defined.'
            }
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

</div>
