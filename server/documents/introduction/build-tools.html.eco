---
layout      : 'default'
css         : 'started'
standalone  : true
order       : 3

title       : 'Build Tools'
description : 'Using Gulp with Fomantic UI'
type        : 'Introduction'
---
<%- @partial('header') %>

<div class="main ui intro container">

  <h2 class="ui dividing header">Overview</h2>

  <div class="no example">
    <h4>30 Second Explanation</h4>
    <p><a href="/introduction/getting-started.html">Download Fomantic UI</a> navigate to the install folder then run a <a href="#gulp-commands">gulp command</a>.</p>

    <p>To build all files:</p>
    <div class="code" data-type="bash">
      npx gulp build
    </div>

    <p>To watch for changes</p>
    <div class="code" data-type="bash">
      npx gulp watch
    </div>
  </div>
  <div class="no example">
    <h4>Why Build Tools?</h4>
    <p>Fomantic UI uses Gulp for several reasons:</p>
    <div class="ui large bulleted list">
      <div class="item">Process LESS files with <a href="/usage/theming.html">theming variables</a></div>
      <div class="item">Add vendor prefixes for <a href="https://github.com/fomantic/Fomantic-UI/blob/master/README.md#-browser-support">supported browsers</a> with <a href="https://github.com/postcss/autoprefixer" target="_blank">autoprefixer</a></div>
      <div class="item">Watch file changes and rebuild the necessary files when adjusting themes</div>
      <div class="item">Automatically process asset paths, so that minified and concatenated releases can exist in different directories</div>
      <div class="item">Allow custom builds with only the required components for your site</div>
      <div class="item">Allow advanced usage like Right-To-Left (RTL) languages using <a href="https://github.com/MohammadYounes/rtlcss" target="_blank">RTLCSS</a></div>
    </div>
  </div>
  <div class="no example">
    <h3 class="ui header">Folder Structure</h3>
    <p>A Fomantic UI project includes the following folder structure.</p>
    <div class="ui list">
      <div class="item">
        <i class="folder icon"></i>
        <div class="content">
          <div class="header">src</div>
          <div class="list">
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <a href="/usage/theming.html#site-theme" class="header">site</a>
                <div class="description">Your site's theme</div>
              </div>
            </div>
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <div class="header">themes</div>
                <div class="list">
                  <div class="item">
                    <i class="folder icon"></i>
                    <div class="content">
                      <a href="/usage/theming.html#default-theme" class="header">default</a>
                      <div class="description">Default theme</div>
                    </div>
                  </div>
                  <div class="item">
                    <i class="folder icon"></i>
                    <div class="content">
                      <a href="/usage/theming.html#packaged-theme" class="header">packaged-theme</a>
                      <div class="description">Additional themes</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <a class="header" href="#themeconfig" >theme.config</a>
                <div class="description">Config file for setting packaged themes</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="item">
        <i class="folder icon"></i>
        <div class="content">
          <div class="header">dist</div>
          <div class="description">Compiled CSS and JS files</div>
          <div class="list">
            <div class="item">
              <i class="folder icon"></i>
              <div class="content">
                <div class="header">components</div>
                <div class="description">Individual component CSS and JS</div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <div class="header">semantic.css</div>
                <div class="description">concatenated release</div>
              </div>
            </div>
            <div class="item">
              <i class="file icon"></i>
              <div class="content">
                <div class="header">semantic.js</div>
                <div class="description">concatenated release</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="item">
        <i class="file icon"></i>
        <div class="content">
          <a href="#semanticjson" class="header">semantic.json</a>
          <div class="description">Contains build settings for gulp</div>
        </div>
      </div>
    </div>
  </div>
  <div class="no example">
    <h4>Gulp Commands</h4>
    <p>Below is a list of all available gulp commands</p>
    <table class="ui definition table">
      <thead>
        <th>Command</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>install</td>
          <td>Asks install questions to setup semantic.json</td>
        </tr>
        <tr>
          <td>watch (default)</td>
          <td>Watches for changes in source files, and builds file on change</td>
        </tr>
        <tr>
          <td>build</td>
          <td>Build all files</td>
        </tr>
        <tr>
          <td>clean</td>
          <td>Cleans <code>dist/</code> folder</td>
        </tr>
        <tr>
          <td>version</td>
          <td>Outputs current version</td>
        </tr>
        <tr>
          <td>build-javascript</td>
          <td>Build JS files</td>
        </tr>
        <tr>
          <td>build-css</td>
          <td>Build CSS files</td>
        </tr>
        <tr>
          <td>build-assets</td>
          <td>Build assets files</td>
        </tr>
        <tr>
          <td>serve-docs</td>
          <td>Serves files to local docs instance</td>
        </tr>
        <tr>
          <td>build-docs</td>
          <td>Builds files to docs folder</td>
        </tr>
      </tbody>
    </table>
  </div>


  <h2 class="ui dividing header">Configuration Files</h2>

  <div class="no example">
    <h4>semantic.json</h4>
    <p>Build tool settings are stored in a special file called <code>semantic.json</code> It can be included in any folder that is in a parent folder of the fomantic install folder.</p>
    <p>If you used the npm or meteor, a <code>semantic.json</code> file is automatically generated for you in the root of your project. If you used a different package manager you can run <code>gulp install</code> to run the interactive installer.</p>
    <div class="ignored code" data-type="json" data-title="semantic.json">
    {
      // base path added to all other paths specified in "paths"
      "base": "",

      // current version of Fomantic UI
      "version": "<%= @getVersion() %>",

      "paths": {

        "source": {

          // source theme.config
          "config"      : "src/theme.config",

          // source definition folder
          "definitions" : "src/definitions/",

          // source site theme
          "site"        : "src/site/",

          // source themes folder
          "themes"      : "src/themes/"
        },

        "output": {
          // packaged source (both compressed/uncompressed)
          "packaged"     : "dist/",

          // uncompressed source
          "uncompressed" : "dist/components/",

          // compressed source
          "compressed"   : "dist/components/",

          // output directory for theme assets
          "themes"       : "dist/themes/"
        },

        // directory for gulp clean task
        "clean"        : "dist/"
      },

      // when set to an integer permission, will set dist files with this file permission
      "permission" : false,

      // whether gulp watch/build should run RTLCSS
      "rtl": false,

      // will only include components with these names
      "components": [
        "reset",
        "site",
        "button",
        "container",
        "divider",
        "flag",
        "header",
        "icon",
        "image",
        "input",
        "label",
        "list",
        "loader",
        "rail",
        "reveal",
        "segment",
        "step",
        "breadcrumb",
        "form",
        "grid",
        "menu",
        "message",
        "table",
        "ad",
        "card",
        "comment",
        "feed",
        "item",
        "statistic",
        "accordion",
        "checkbox",
        "dimmer",
        "dropdown",
        "embed",
        "modal",
        "nag",
        "popup",
        "progress",
        "rating",
        "search",
        "shape",
        "sidebar",
        "sticky",
        "tab",
        "transition",
        "api",
        "state",
        "visibility",
        "text",
        "calendar",
        "slider",
        "toast",
        "emoji"
      ],

      // generate .css/.js files for individual components (under /dist/components), but exclude them from semantic.css and semantic.js
      "individuals": [
        "form",
        "modal",
        "step",
        "emoji"
      ],

      // Use custom postcss/autoprefixer options object
      "prefix": {},

      // Use a custom Banner on each generated js/css file
      "banner": "/* A custom central FUI Banner !!!\n Awesome Release! \n*/",

      // strip all top headers from each component inside the concatenated, non-minified, semantic.css/js
      "stripHeaders": true,

      // Custom placeholder values inside banner
      "header": {
         "year": "ALWAYS 2099 :)",
         "title": "Fomantic-UI Pro",
         "repository": "Not yet available",
         "url": "https://fomantic-ui.com/pro"
      },

      // whether to include special project maintainer tasks
      "admin": false
    }

    </div>
  </div>

  <div class="no example" data-since="2.8.1">
    <h4>variation.variables</h4>
    <p>You can disable specific variations of components allowing you to generate CSS files which only contain features you require. This makes your custom distribution files much smaller in size</p>
    <p>Most of the components also have a separate variable to decide which components should be rendered for which colors of your global color palette of colors.less or which sizes should be rendered.</p>

    <div class="code" data-type="less" data-title="src/themes/default/globals/variation.variables">
    // The defaults enable everything
    // In a custom theme you could only disable/adjust the variables you don't need in your own {component}.variables
    @variationButtonTertiary: false;          // don't compile tertiary button styles
    @variationIconColors: red, green, batman; // only compile red and green as icon color options
    @variationImageSizes: small, huge;        // only compile small and huge image sizes
    @variationSegmentColors: false;           // don't compile any segment color styles
    @variationBreadcrumbSizes: false;         // don't compile any breadcrumb size styles
    </div>
  </div>

  <div class="no example" data-since="2.7.0">
    <h4>colors.less</h4>
    <p>You can modify/define the global color palette entirely by adjusting a single LESS Map <code>@colors</code> in a custom <code>colors.less</code> file.</p>
    <p>Each color consists of a predefined set of properties used in all components. You can define whatever color name you want.</p>
    <div class="ui ignored info message">
        If you only want to reduce the used colors from the default palette, you may only adjust the related colors-list variables inside <a href="#variationvariables"><code>variation.variables</code></a> instead of changing the colors.less file.
        <div class="code" data-type="less">
        // limit all components to yellow, purple and green
        @variationAllColors: yellow, purple, green;
        // purple buttons, red labels, green messages and no colors for all other components
        @variationAllColors: false;
        @variationButtonColors: purple;
        @variationLabelColors: red;
        @variationMessageColors: green;
        </div>
    </div>
    <div class="ui ignored warning message">
        If you change the whole available colors like in the example below, make sure you also adjust the related colors-list variables inside <a href="#variationvariables"><code>variation.variables</code></a> to avoid a build error.
        <div class="code" data-type="less">
            @variationAllComponents: batman, spiderman;
        </div>
    </div>
    <div class="code" data-type="less" data-title="src/themes/default/globals/colors.less">
// This example would only provide two custom colors "batman", "spiderman"
// Your custom compiled build will contain all colorable components
// like "ui batman button" or "ui spiderman label"
    @colors: {
      @batman: {
        color          : @white;
        light          : @grey;
        border         : @grey;
        background     : @black;
        header         : #222222;
        boxShadow      : @greyBoxShadow;
        boxFloatShadow : @greyBoxFloatingShadow;
        text           : @white;
        lightText      : @white;
        hoverText      : @grey;
        focus          : @white;
        lightFocus     : @grey;
        down           : @white;
        lightDown      : @grey;
        active         : #888866;
        lightActive    : #888822;
        shadow         : @greyTextShadow;
        lightShadow    : @lightGreyTextShadow;
        hover          : @grey;
        lightHover     : @grey;
        ribbon         : @greyRibbonShadow;
        invertedRibbon : @greyInvertedRibbonShadow;
        tertiary       : @greyTertiaryColor;
        tertiaryHover  : @greyTertiaryColorHover;
        tertiaryFocus  : @greyTertiaryColorFocus;
        tertiaryActive : @greyTertiaryColorActive;
        bright         : @white;
        brightHover    : @grey;
        isDark         : false;     // 'true' will adjust light colors on non inverted variants
        isVeryDark     : false;     // 'true' will use black/white in certain color/background situations
      };
      @spiderman: {
        color          : @red;
        light          : @lightRed;
        border         : @lightRed;
        ... // and all the other properties as above
      };
    };
    </div>

    <p>The colors.less file also contains another central LESS Map <code>@formStates</code>for defining form states. Also here, you can define any form state name and its colors as you like.</p>
    <div class="code" data-type="less" data-title="src/themes/default/globals/colors.less">

// Your final custom compiled build will offer form components like
// "ui excited input" or ".ui.form > .excited.message"
    @formStates: {
      @excited: {
        color: #880000;
        background: #ffcccc;
        borderColor: @red;
        borderRadius: 10px;
        boxShadow: @inputErrorBoxShadow;
        cornerLabelColor: @white;
        labelBackground: @lightRed;
        dropdownLabelColor: @red;
        dropdownLabelBackground: @lightRed;
        dropdownHoverBackground: @lightRed;
        dropdownSelectedBackground: @lightRed;
        dropdownActiveBackground: @lightRed;
        inputAutoFillBackground: @lightRed;
        inputAutoFillBorderColor: @red
        inputFocusBackground: @lightRed;
        inputFocusColor: @red;
        inputFocusBorderColor: #440000;
        inputFocusBoxShadow: @inputErrorFocusBoxShadow;
        inputPlaceholderColor: #660000;
        inputPlaceholderFocusColor: #550000;
        transparentBackground: @white;
        transparentColor: @red;
      };
    };

    </div>

  </div>

  <div class="no example">
    <h4>Excluding components from main css/js file</h4>
    <p>By default, all components listed in semantic.json are added to semantic.css and semantic.js on build, but sometimes you don't need a component to be included on every page. To keep the file size of your main assets down, it's better to separate these components and reference them individually in your HTML.</p>
    <p>To make this work, add these components to your semantic.json as "individuals" (see above example). Then the css/js files will still be generated/updated as usual under dist/components.</p>
    <p><strong>Note:</strong> You can specify only the individuals in semantic.json and leave the components list empty. The individuals are automatically excluded from the main components list.</p>
  </div>

  <div class="no example">
    <h4>theme.config</h4>
    <p>LESS uses a special configuration file <code>theme.config</code> which lets you specify what theme each component should use. If you have not generated this file yet, you will receive an error message when running build tools</p>
    <p>You can learn more about <code>theme.config</code> by checking out the <a href="/usage/theming.html#using-packaged-themes">theming guide</a></p>
  </div>

  <div class="no example">
    <h4>Importing Gulp Tasks</h4>
    <p>See our <a href="/introduction/advanced-usage.html">recipes section</a> for examples on how to import individual gulp tasks into your custom Gulpfile.</p>
  </div>
  <div class="no example" data-since="2.2">
    <h4>
      Auto-Install & Continuous Integration
    </h4>
    <p>We've added a new setting to <code>semantic.json</code> in 2.2 to help make working with a CLI, or other automated deployments more streamlined.</p>
    <p>Specifying <code>autoInstall: true</code> in an environments <code>semantic.json</code> configuration will prevent any user prompting when running <code>npx gulp install</code> allowing for automated deployment.</p>
  </div>

</div>
