---
layout      : 'default'
css         : ''
element     : 'toast'
elementType : 'module'
standalone  : true

title       : 'Toast'
description : 'A toast allows users to be notified of an event'
type        : 'UI Module'
status      : 'BETA'
statusColor : 'orange'

themes      : ['Default']
---
<link rel="stylesheet/less" type="text/css" href="/src/definitions/modules/toast.less" />
<script src="/javascript/toast.js"></script>

<%- @partial('header', { tabs: { definition: 'Definition', examples: 'Examples', settings: 'Settings'} }) %>

<div class="main ui container">

  <div class="ui active tab" data-tab="definition">

  <h2 class="ui dividing header">Types</h2>

    <div class="no example">
        <h4 class="ui header">Minimal</h4>
        <p>A minimal toast will just display a message.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            message: 'I am a toast, nice to meet you !'
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Titled</h4>
        <p>You can add a title to your toast.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            title: 'Better ?',
            message: 'Hey look, I have a title !'
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">ProgressBar</h4>
        <p>You can attach a progressbar to your toast.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            title: 'LOOK',
            message: 'See, how long i will last',
            showProgress: 'bottom'
          })
        ;
        </div>
    </div>

    <h2 class="ui dividing header">Variations</h2>

    <div class="no example">
        <h4 class="ui header">Toast Type</h4>
        <p>A toast can be used to display different types of informations.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            class: 'success',
            message: `You're using the good framework !`
          })
        ;
        </div>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            class: 'error',
            message: `An error occured !`
          })
        ;
        </div>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            class: 'warning',
            message: `Behind you !`
          })
        ;
        </div>
    </div>
    
    <div class="no example">
        <h4 class="ui header">Position</h4>
        <p>A toast can appear in different positions on the screen.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            position: 'bottom right',
            message: `It's pretty cold down there...`
          })
        ;
        </div>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            position: 'top left',
            message: `Look, I'm here !`
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Duration</h4>
        <p>You can choose how long a toast should be displayed.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            displayTime: 5000,
            message: `You will see me for 5 seconds.`
          })
        ;
        </div>
        <p>You can even avoid a toast to disapear.</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            displayTime: 0,
            message: `I'll stay here until you click on me !`
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Use Message Style</h4>
        <p>You can use all of the styles and colors from the message component</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            title: 'Awesome',
            message: 'I got my style from the message class',
            class : 'purple',
            className: {
                toast: 'ui message'
            }
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Decreasing ProgressBar</h4>
        <p>The progressbar could be be lowered instead of raised</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            title: 'LOOK',
            message: 'See, how long i will last',
            showProgress: 'top',
            progressUp: false
          })
        ;
        </div>
    </div>
    
    <div class="no example">
        <h4 class="ui header">Color Variants</h4>
        <p>You can use all of the usual color names</p>
        <div class="code" data-demo="true">
        if(typeof document.suiToastColorIndex === 'undefined') {
          document.suiToastColorIndex = -1;
        }
        var suiColors = ['red','orange','yellow','olive','green','teal','blue','violet','purple','pink','brown','grey','black'],
            suiPlus = function(){
                if (++document.suiToastColorIndex === suiColors.length) {
                    document.suiToastColorIndex = 0;
                }
                return document.suiToastColorIndex;
            }
        ;
        $('body')
          .toast({
            message: 'I am a colorful toast',
//            class: 'purple',
            class : suiColors[suiPlus()],   //cycle through all colors
            showProgress: 'bottom'
          })
        ;
        </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Inverted Colors</h4>
        <p>Same as above, just add <code>inverted</code> to the class definition</p>
        <div class="code" data-demo="true">
        if(typeof document.suiToastColorIndex === 'undefined') {
          document.suiToastColorIndex = -1;
        }
        var suiColors = ['red','orange','yellow','olive','green','teal','blue','violet','purple','pink','brown','grey','black'],
            suiPlus = function(){
                if (++document.suiToastColorIndex === suiColors.length) {
                    document.suiToastColorIndex = 0;
                }
                return document.suiToastColorIndex;
            }
        ;
        $('body')
          .toast({
            message: 'I am an inverted colorful toast',
//            class: 'inverted purple',
            class : 'inverted ' + suiColors[suiPlus()],   //cycle through all colors
            showProgress: 'bottom'
          })
        ;
        </div>
    </div>

  </div>

  <div class="ui tab" data-tab="examples">

    <h2 class="ui dividing header">Examples</h2>

    <div class="no example">
      <h4 class="ui header">Without icon</h4>
      <p>You can choose to hide the status icon.</p>
      <div class="code" data-demo="true">
      $('body')
        .toast({
          class: 'warning',
          showIcon: false,
          message: 'Hey, where is my icon ?'
        })
      ;
      </div>
    </div>

    <div class="no example">
      <h4 class="ui header">Individual icon</h4>
      <p>Use whatever you like from the included FontAwesome gallery</p>
      <div class="code" data-demo="true">
      $('body')
        .toast({
          class: 'info',
          showIcon: 'microphone',
          message: 'Listen to me'
        })
      ;
      </div>
    </div>

    <div class="no example">
      <h4 class="ui header">Close Icon</h4>
      <p>You can force the user to click a close Icon instead of clicking anywhere on the toast to close it</p>
      <div class="code" data-demo="true">
      $('body')
        .toast({
          class: 'info',
          displayTime: 0,
          closeIcon: true,
          message: 'Click on the X to close me'
        })
      ;
      </div>
    </div>

    <div class="no example">
      <h4 class="ui header">Transitions</h4>
      <p>You can set other transitions types and durations.</p>
      <div class="code" data-demo="true">
      $('body')
        .toast({
          class: 'success',
          message: 'Did you notice any difference ?',
          transition: {
            showMethod   : 'zoom',
            showDuration : 1000,
            hideMethod   : 'fade',
            hideDuration : 1000
          }
        })
      ;
      </div>
    </div>

    <div class="no example">
        <h4 class="ui header">Show Boxshadow on hover</h4>
        <p>Change the components className to get additional styles</p>
        <div class="code" data-demo="true">
        $('body')
          .toast({
            message: 'I got my style from the message class',
            class : 'brown',
            className: {
                toast: 'ui hoverfloating message'
            }
          })
        ;
        </div>
    </div>

  </div>

  <div class="ui tab" data-tab="settings">

    <h2 class="ui dividing header">Settings</h2>
    
    <h3 class="ui header">
      Toast Settings
      <div class="sub header">Settings to configure toast behavior</div>
    </h3>
    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th class="four wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>position</td>
          <td>top right</td>
          <td>Sets where the toast can be displayed. Can be <code>top right</code>, <code>top center</code>, <code>top left</code>, <code>bottom right</code>, <code>bottom center</code> and <code>bottom left</code></td>
        </tr>
        <tr>
          <td>class</td>
          <td>info</td>
          <td>Define the class of notification. Can be <code>info</code>, <code>success</code>, <code>warning</code> and <code>error</code>. If <code>ui message</code> is used in className.toast option (see below), this option can hold any supported class of the message component</td>
        </tr>
        <tr>
          <td>displayTime</td>
          <td>3000</td>
          <td>Set the time (in ms) of the toast appearance. Set <code>0</code> to disable the automatic dismissal</td>
        </tr>
        <tr>
          <td>showIcon</td>
          <td>true</td>
          <td>Define if the toast should display an icon. If a string is given, this will be used as icon classname</td>
        </tr>
        <tr>
          <td>closeIcon</td>
          <td>false</td>
          <td>This will make the toast closable by the top right corner icon instead of clicking anywhere on the toast</td>
        </tr>
        <tr>
          <td>showProgress</td>
          <td>false</td>
          <td>Displays a progressbar on <code>top</code> or <code>bottom</code> increasing until displayTime is reached. . <code>false</code> won't display any progressbar. If displayTime option is 0, this option is ignored</td>
        </tr>
        <tr>
          <td>progressUp</td>
          <td>true</td>
          <td><code>true</code>Increases the progressbar from 0% to 100%<br><code>false</code> Decreases the progressbar from 100% to 0%</td>
        </tr>
        <tr>
          <td>compact</td>
          <td>true</td>
          <td><code>true</code> will display the toast in a fixed width, <code>false</code> displays the toast responsively with dynamic width</td>
        </tr>
        <tr>
          <td>opacity</td>
          <td>1</td>
          <td>Opacity Value of the toast after the show-transition</td>
        </tr>
        <tr>
          <td>newestOnTop</td>
          <td>false</td>
          <td>Define if new toasts should be displayed above the others</td>
        </tr>
        <tr>
          <td>transition</td>
          <td>
            <div class="code">
      transition: {
        showMethod   : 'scale',
        showDuration : 500,
        hideMethod   : 'scale',
        hideDuration : 500,
        closeEasing  : 'easeOutBounce'
      }
            </div>
          </td>
          <td>Settings to set the transitions and durations during the show or the hide of a toast</td>
        </tr>
      </tbody>
    </table>

    <h4 class="ui header">Callbacks</h4>
    <p>Callbacks specify a function to occur after a specific behavior.</p>

    <table class="ui celled sortable definition table segment">
      <thead>
        <tr>
          <th class="four wide"></th>
          <th class="four wide">Parameters</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>onShow</td>
          <td>$module</td>
          <td>Callback before toast is shown. Returning <code>false</code> from this callback will cancel the toast from showing.</td>
        </tr>
        <tr>
          <td>onVisible</td>
          <td>$module</td>
          <td>Callback after toast is shown.</td>
        </tr>
        <tr>
          <td>onClick</td>
          <td>$module</td>
          <td>Callback after popup is clicked in.</td>
        </tr>
        <tr>
          <td>onHide</td>
          <td>$module</td>
          <td>Callback before toast is hidden. Returning <code>false</code> from this callback will cancel the toast from hiding.</td>
        </tr>
        <tr>
          <td>onHidden</td>
          <td>$module</td>
          <td>Callback after toast is hidden.</td>
        </tr>
        <tr>
          <td>onRemove</td>
          <td>$module</td>
          <td>Callback before toast is destroyed.</td>
        </tr>
      </tbody>
    </table>

    <h3 class="ui header">
      Content Settings
      <div class="sub header">Settings to specify toast contents</div>
    </h3>
    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>title</td>
          <td>A title for the toast. Leave empty to not display it</td>
        </tr>
        <tr>
          <td>message</td>
          <td>Message to display</td>
        </tr>
      </tbody>
    </table>

    <h3 class="ui header">
      DOM Settings
      <div class="sub header">DOM settings specify how this module should interface with the DOM</div>
    </h3>
    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th class="six wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>namespace</td>
          <td>toast</td>
          <td>Event namespace. Makes sure module teardown does not effect other events attached to an element.</td>
        </tr>
        <tr>
          <td>selector</td>
          <td>
            <div class="code">
    selector    : {
      container    : '.toast-container',
      toast        : '.ui.toast'
    }
            </div>
          </td>
          <td>DOM Selectors used internally</td>
        </tr>
        <tr>
          <td>className</td>
          <td>
            <div class="code">
    className   : {
      container    : 'toast-container',
      box          : 'toast-box',
      progress     : 'ui attached active progress',
      toast        : 'ui toast',
      icon         : 'icon',
      visible      : 'visible',
      content      : 'content',
      title        : 'header'
    }
            </div>
          </td>
          <td>Class names used to attach style to state</td>
        </tr>
        <tr>
          <td>icons</td>
          <td>
            <div class="code">
    icons   : {
      info         : 'info',
      success      : 'checkmark',
      warning      : 'warning',
      error        : 'times'
    }
            </div>
          </td>
          <td>Icon names used internally</td>
        </tr>
      </tbody>
    </table>

    <div class="ui horizontal divider"><i class="icon setting"></i></div>

    <h3 class="ui header">
      Debug Settings
      <div class="sub header">Debug settings controls debug output to the console</div>
    </h3>

    <table class="ui celled sortable definition table segment">
      <thead>
        <th>Setting</th>
        <th class="four wide">Default</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>name</td>
          <td>Toast</td>
          <td>Name used in debug logs</td>
        </tr>
        <tr>
          <td>silent</td>
          <td>false</td>
          <td>Silences all console output including error messages, regardless of other debug settings.</td>
        </tr>
        <tr>
          <td>debug</td>
          <td>false</td>
          <td>Provides standard debug output to console</td>
        </tr>
        <tr>
          <td>performance</td>
          <td>true</td>
          <td>Provides standard debug output to console</td>
        </tr>
        <tr>
          <td>verbose</td>
          <td>true</td>
          <td>Provides ancillary debug output to console</td>
        </tr>
        <tr>
          <td>errors</td>
          <td colspan="2">
            <div class="code">
            error: {
              method          : 'The method you called is not defined.',
              noTransition    : 'This module requires ui transitions.'
            }
            </div>
          </td>
        </tr>
      </tbody>
    </table>

  </div>
</div>
